# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: [pull_request, push]

jobs:
  build:
    strategy:
      matrix:
        # Use these Java versions
        java: [
          21,    # Current Java LTS & minimum supported by Minecraft
        ]
        # and run on both Linux and Windows
        os: [ubuntu-20.04, windows-2022]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      packages: read
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Create LICENSE file if missing
        run: |
          if [ ! -f LICENSE ]; then
            echo "Creating LICENSE file..."
            echo "MIT License" > LICENSE
            echo "" >> LICENSE
            echo "Copyright (c) $(date +%Y) Alexander01998" >> LICENSE
            echo "" >> LICENSE
            echo "Permission is hereby granted, free of charge, to any person obtaining a copy" >> LICENSE
            echo "of this software and associated documentation files (the \"Software\"), to deal" >> LICENSE
            echo "in the Software without restriction, including without limitation the rights" >> LICENSE
            echo "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell" >> LICENSE
            echo "copies of the Software, and to permit persons to whom the Software is" >> LICENSE
            echo "furnished to do so, subject to the following conditions:" >> LICENSE
            echo "" >> LICENSE
            echo "The above copyright notice and this permission notice shall be included in all" >> LICENSE
            echo "copies or substantial portions of the Software." >> LICENSE
          fi
      - name: setup jdk ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'gradle'
          check-latest: true
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          cache-disabled: true
      - name: Configure Maven settings
        if: runner.os != 'Windows'
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <mirrors>
              <mirror>
                <id>aliyun</id>
                <mirrorOf>central</mirrorOf>
                <name>Aliyun Maven Mirror</name>
                <url>https://maven.aliyun.com/repository/public</url>
              </mirror>
            </mirrors>
          </settings>
          EOF
      - name: Configure Maven settings (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "$env:USERPROFILE\.m2"
          @"
          <settings>
            <mirrors>
              <mirror>
                <id>aliyun</id>
                <mirrorOf>central</mirrorOf>
                <name>Aliyun Maven Mirror</name>
                <url>https://maven.aliyun.com/repository/public</url>
              </mirror>
            </mirrors>
          </settings>
          "@ | Out-File -FilePath "$env:USERPROFILE\.m2\settings.xml" -Encoding UTF8
      - name: Configure Gradle properties
        if: runner.os != 'Windows'
        run: |
          mkdir -p ~/.gradle
          echo "org.gradle.parallel=true" >> ~/.gradle/gradle.properties
          echo "org.gradle.caching=true" >> ~/.gradle/gradle.properties
          echo "systemProp.org.gradle.internal.http.connectionTimeout=180000" >> ~/.gradle/gradle.properties
          echo "systemProp.org.gradle.internal.http.socketTimeout=180000" >> ~/.gradle/gradle.properties
          echo "systemProp.org.gradle.internal.repository.max.retries=10" >> ~/.gradle/gradle.properties
          echo "systemProp.org.gradle.internal.repository.initial.backoff=500" >> ~/.gradle/gradle.properties
          echo "systemProp.https.protocols=TLSv1.2,TLSv1.3" >> ~/.gradle/gradle.properties
      - name: Configure Gradle properties (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "$env:USERPROFILE\.gradle"
          @"
          org.gradle.parallel=true
          org.gradle.caching=true
          systemProp.org.gradle.internal.http.connectionTimeout=180000
          systemProp.org.gradle.internal.http.socketTimeout=180000
          systemProp.org.gradle.internal.repository.max.retries=10
          systemProp.org.gradle.internal.repository.initial.backoff=500
          systemProp.https.protocols=TLSv1.2,TLSv1.3
          "@ | Out-File -FilePath "$env:USERPROFILE\.gradle\gradle.properties" -Encoding UTF8
      - name: Make Gradle wrapper executable
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew
      - name: Download dependencies
        run: ./gradlew dependencies --refresh-dependencies --no-daemon
      - name: Fix code style violations
        run: |
          ./gradlew spotlessApply \
            --no-daemon \
            --stacktrace \
            --console=plain \
            --no-configuration-cache \
            -Dorg.gradle.jvmargs="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError"
      - name: Commit format changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'style: 自动修复代码格式'
          file_pattern: '*.java'
      - name: build
        run: |
          export GRADLE_OPTS="-Xmx4g -Dorg.gradle.daemon=false"
          ./gradlew build --stacktrace --info --refresh-dependencies --continue
        env:
          MAVEN_OPTS: -Dmaven.wagon.http.retryHandler.count=3
          GRADLE_OPTS: "-Dorg.gradle.parallel=true -Dorg.gradle.caching=true"
      - name: capture build artifacts
        if: ${{ runner.os == 'Linux' && matrix.java == '21' }} # Only upload artifacts built from latest java on one OS
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: build/libs/
